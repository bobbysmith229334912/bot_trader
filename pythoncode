import ccxt
import time
import threading
import logging
import tkinter as tk
from tkinter import ttk, messagebox
from tkinter.scrolledtext import ScrolledText
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from matplotlib.figure import Figure
from mplfinance.original_flavor import candlestick_ohlc
import matplotlib.dates as mpl_dates

class TextHandler(logging.Handler):
    def __init__(self, text_widget):
        logging.Handler.__init__(self)
        self.text_widget = text_widget

    def emit(self, record):
        msg = self.format(record)
        self.text_widget.config(state=tk.NORMAL)
        self.text_widget.insert(tk.END, msg + '\n')
        self.text_widget.config(state=tk.DISABLED)
        self.text_widget.see(tk.END)

def get_symbols(exchange):
    markets = exchange.load_markets()
    time.sleep(1)
    return list(markets.keys())

def fetch_ticker_price(exchange, symbol):
    ticker = exchange.fetch_ticker(symbol)
    time.sleep(1)
    return ticker['last']

def fetch_ohlc_data(exchange, symbol):
    ohlc_data = exchange.fetch_ohlcv(symbol, timeframe='1d', limit=10)
    time.sleep(1)
    return ohlc_data

def create_candlestick_figure(ohlc_data):
    df = pd.DataFrame(ohlc_data, columns=['Date', 'Open', 'High', 'Low', 'Close', 'Volume'])
    df['Date'] = pd.to_datetime(df['Date'], unit='ms')
    df['Date'] = df['Date'].apply(mpl_dates.date2num)
    df = df.astype(float)

    fig = Figure(figsize=(5, 4), dpi=100)
    ax = fig.add_subplot(111)
    candlestick_ohlc(ax, df.values, width=0.6, colorup='g', colordown='r', alpha=0.8)
    return fig

def draw_on_canvas(root, fig):
    canvas = FigureCanvasTkAgg(fig, master=root)
    canvas.draw()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    toolbar = NavigationToolbar2Tk(canvas, root)
    toolbar.update()
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

def start_trading(symbol, target_profit_value, stop_loss_value, exchange, run_flag, root, paper_money_balance, balance_var, trading_status_var, log_text, trade_action_var, run_time, trading_mode_var):
    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s", filename="trading.log")

    log_handler = TextHandler(log_text)
    log_handler.setLevel(logging.INFO)
    log_formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
    log_handler.setFormatter(log_formatter)
    logging.getLogger().addHandler(log_handler)

    balance_base = paper_money_balance
    balance_var.set(f'Total balance: {balance_base:.2f} USD')

    balance_fraction = 0.01
    last_buy_price = None
    start_time = time.time()

    while run_flag[0] and (time.time() - start_time) < run_time:
        try:
            current_price = fetch_ticker_price(exchange, symbol)
            logging.info(f'Current price for {symbol}: {current_price}')

            if trading_mode_var.get() == 'Trading Mode: Paper Money':
                if balance_base > 0:
                    if last_buy_price is None or current_price - last_buy_price > target_profit_value:
                        order_size = balance_base * balance_fraction
                        balance_base -= order_size
                        last_buy_price = current_price
                        logging.info(f'Buy: {order_size:.2f} USD at {current_price}')
                        trade_action_var.set("Action: Buy")

                    elif last_buy_price - current_price > stop_loss_value:
                        balance_base += order_size * (1 - stop_loss_value)
                        last_buy_price = None
                        logging.info(f'Sell due to stop loss: {order_size*(1-stop_loss_value):.2f} USD at {current_price}')
                        trade_action_var.set("Action: Sell")

            elif trading_mode_var.get() == 'Trading Mode: Real Money':
                logging.info(f"Real trading is not implemented. Current price for {symbol}: {current_price}")

            time.sleep(0.1)
            balance_var.set(f'Total balance: {balance_base:.2f} USD')

        except Exception as e:
            logging.error(f'An unexpected error occurred: {e}')
            time.sleep(1)

    trading_status_var.set('Trading: Inactive')
    trade_action_var.set('Action: -')

def check_api_keys(exchange):
    try:
        exchange.fetch_balance()  # Requires valid API keys
        return True
    except:
        return False

def main():
    root = tk.Tk()
    root.geometry('400x600')
    root.title("Crypto Trading Bot")

    run_flag = [True]  

    tk.Label(root, text="API Key:").pack()
    api_key_entry = tk.Entry(root)
    api_key_entry.pack()

    tk.Label(root, text="API Secret:").pack()
    api_secret_entry = tk.Entry(root, show='*') 
    api_secret_entry.pack()

    def create_exchange_instance():
        return ccxt.kraken({
            'apiKey': api_key_entry.get(),
            'secret': api_secret_entry.get(),
        })

    exchange = create_exchange_instance()

    api_status_canvas = tk.Canvas(root, width=20, height=20)
    api_status_canvas.pack()

    api_status = check_api_keys(exchange)
    if api_status:
        api_status_canvas.create_oval(10, 10, 20, 20, fill='green')
    else:
        api_status_canvas.create_oval(10, 10, 20, 20, fill='red')

    tk.Label(root, text="Symbol:").pack()
    symbols = get_symbols(exchange)
    symbol_entry = ttk.Combobox(root, values=symbols)
    symbol_entry.pack()

    values = [i*0.0001 for i in range(1, 101)]

    tk.Label(root, text="Target Profit Value:").pack()
    profit_entry = ttk.Combobox(root, values=values)
    profit_entry.pack()

    tk.Label(root, text="Stop Loss Value:").pack()
    loss_entry = ttk.Combobox(root, values=values)
    loss_entry.pack()

    tk.Label(root, text="Paper Money Balance (USD):").pack()
    paper_money_balance_entry = ttk.Combobox(root, values=[100, 500, 1000, 5000, 10000])
    paper_money_balance_entry.pack()

    trading_mode_var = tk.StringVar(root, 'Trading Mode: Paper Money')
    tk.Label(root, textvariable=trading_mode_var).pack()

    def toggle_trading_mode():
         if trading_mode_var.get() == 'Trading Mode: Paper Money':
            trading_mode_var.set('Trading Mode: Real Money')
         else:
            trading_mode_var.set('Trading Mode: Paper Money')

    tk.Button(root, text="Toggle Trading Mode", command=toggle_trading_mode).pack()

    trading_status_var = tk.StringVar(root, 'Trading: Inactive')
    tk.Label(root, textvariable=trading_status_var).pack()

    balance_var = tk.StringVar(root, 'Total balance: 0.00 USD')
    tk.Label(root, textvariable=balance_var).pack()

    trade_action_var = tk.StringVar(root, 'Action: -')
    tk.Label(root, textvariable=trade_action_var).pack()

    log_text = ScrolledText(root)
    log_text.pack()

    def start():
        symbol = symbol_entry.get()
        target_profit_value = float(profit_entry.get())
        stop_loss_value = float(loss_entry.get())
        paper_money_balance = float(paper_money_balance_entry.get())
        exchange = create_exchange_instance()
        api_status = check_api_keys(exchange)
        if api_status:
            api_status_canvas.create_oval(10, 10, 20, 20, fill='green')
            run_flag[0] = True
            trading_status_var.set('Trading: Active')
            threading.Thread(target=start_trading, args=(symbol, target_profit_value, stop_loss_value, exchange, run_flag, root, paper_money_balance, balance_var, trading_status_var, log_text, trade_action_var, 600, trading_mode_var)).start()
        else:
            api_status_canvas.create_oval(10, 10, 20, 20, fill='red')
            messagebox.showerror("Error", "Invalid API keys")

    tk.Button(root, text="Start", command=start).pack()

    def stop():
        run_flag[0] = False
        trading_status_var.set('Trading: Inactive')

    tk.Button(root, text="Stop", command=stop).pack()

    root.mainloop()

if __name__ == "__main__":
    main()
